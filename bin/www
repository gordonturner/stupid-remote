#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('stupid-remote:server');
var http = require('http');

/**
 * node-cec dependencies
 */
var nodecec = require('node-cec');
var NodeCec = nodecec.NodeCec;
var CEC     = nodecec.CEC;
var cecUsb  = new NodeCec( '/dev/ttyACM0' );

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Kill cec-client process on exit
 */
process.on( 'SIGINT', function() {
  debug('SIGINT, stopping cec');
  if ( cecUsb != null ) {
    cecUsb.stop();
  }
});


/**
 * Setup cec event handling
 */
cecUsb.once( 'ready', function(client) {
  debug('cecUsb ready' );
  client.sendCommand( 0xf0, CEC.Opcode.GIVE_DEVICE_POWER_STATUS );
});

cecUsb.on( 'REPORT_POWER_STATUS', function (packet, status) {
  debug('cecUsb reporting power status');
  
  var keys = Object.keys( CEC.PowerStatus );
  
  for (var i = keys.length - 1; i >= 0; i--) {
    if (CEC.PowerStatus[keys[i]] == status) {
      debug('POWER_STATUS:', keys[i]);
      break;
    }
  }
  
});

cecUsb.on( 'ROUTING_CHANGE', function(packet, fromSource, toSource) {
  debug('cecUsb routing changed from ' + fromSource + ' to ' + toSource );
});


/**
 * Start cec client
 * -m  = start in monitor-mode
 * -d8 = set log level to 8 (=TRAFFIC) (-d 8)
 * -br = logical address set to `recording device`
 */
cecUsb.start( 'cec-client', '-m', '-d', '8', '-b', 'r' );


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

exports.cecUsb = cecUsb;